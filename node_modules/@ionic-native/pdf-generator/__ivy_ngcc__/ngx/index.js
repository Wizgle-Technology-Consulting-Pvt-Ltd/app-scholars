import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var PDFGenerator = /** @class */ (function (_super) {
    __extends(PDFGenerator, _super);
    function PDFGenerator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PDFGenerator.prototype.fromURL = function (url, options) { return cordova(this, "fromURL", { "otherPromise": true }, arguments); };
    PDFGenerator.prototype.fromData = function (data, options) { return cordova(this, "fromData", { "otherPromise": true }, arguments); };
    PDFGenerator.pluginName = "PDFGenerator";
    PDFGenerator.plugin = "cordova-pdf-generator";
    PDFGenerator.pluginRef = "cordova.plugins.pdf";
    PDFGenerator.repo = "https://github.com/cesarvr/pdf-generator";
    PDFGenerator.platforms = ["Android", "iOS"];
PDFGenerator.ɵfac = /*@__PURE__*/ function () { var ɵPDFGenerator_BaseFactory; return function PDFGenerator_Factory(t) { return (ɵPDFGenerator_BaseFactory || (ɵPDFGenerator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(PDFGenerator)))(t || PDFGenerator); }; }();
PDFGenerator.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: PDFGenerator, factory: function (t) { return PDFGenerator.ɵfac(t); }, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PDFGenerator, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();
    return PDFGenerator;
}(IonicNativePlugin));
export { PDFGenerator };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvcGRmLWdlbmVyYXRvci9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7QUFDeEU7QUFHUSxJQTJEMEIsZ0NBQWlCO0FBQUM7QUFFOUI7QUFBeUU7QUFBTSxJQU1uRyw4QkFBTyxhQUFDLEdBQVcsRUFBRSxPQUE2QjtBQUtuQixJQU0vQiwrQkFBUSxhQUFDLElBQVksRUFBRSxPQUE2QjtBQUlmO0FBQThDO0FBQW1EO0FBQW9EO0FBQW9FO2dEQTFCL1AsVUFBVSxTQUFDLHNCQUNWLFVBQVUsRUFBRSxNQUFNLG1CQUNuQjs7Ozs7OzswQkFDUTtBQUFDLHVCQWhFVjtBQUFFLEVBZ0VnQyxpQkFBaUI7QUFDbEQsU0FEWSxZQUFZO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBQREZHZW5lcmF0b3JPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBkb2N1bWVudCBzaXplLCBlLmcuLCBBMiwgQTMsIG9yIEE0LlxuICAgKiBPbmx5IHN1cHBvcnRlZCBvbiBpT1MuXG4gICAqIFRoZSBkZWZhdWx0IGlzICdBNCcuXG4gICAqL1xuICBkb2N1bWVudFNpemU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE9wdGlvbiB0byBjaGFuZ2UgdG8gbGFuZHNjYXBlIG9yaWVudGF0aW9uLlxuICAgKiBEZWZhdWx0IGlzICdwb3J0cmFpdCcuXG4gICAqL1xuICBsYW5kc2NhcGU/OiAnbGFuZHNjYXBlJyB8ICdwb3J0cmFpdCc7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIHRvIGJlIHJldHVybmVkLCBlaXRoZXIgJ3NoYXJlJyBvciAnYmFzZTY0Jy5cbiAgICogSWYgJ3NoYXJlIGlzIGNob3NlbiwgdGhlIFBERiBpcyBzaGFyZWQgd2l0aCB0aGUgc3lzdGVtIGNhcGFiaWxpdGllcy5cbiAgICogRGVmYXVsdCBpcyAnYmFzZTY0J1xuICAgKi9cbiAgdHlwZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGRlc2lyZWQgZmlsZW5hbWUgdGhlIHJlc3VsdGluZyBQREYgc2hvdWxkIGhhdmUuXG4gICAqIERlZmF1bHQgaXMgJ2RlZmF1bHQucGRmJ1xuICAgKi9cbiAgZmlsZU5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE9wdGlvbiB0byBzZXQgdGhlIGJhc2UgVVJMIGZvciBwYXRoaW5nLlxuICAgKiBEZWZhdWx0IGlzICdudWxsJy5cbiAgICovXG4gIGJhc2VVcmw/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQG5hbWUgUERGR2VuZXJhdG9yXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNpbXBsZSBwbHVnaW4gdG8gZ2VuZXJhdGUgKG9mZmxpbmUpIHBkZi4gVGhlIHBsdWdpbiB0cmFuc2Zvcm1zIEhUTUwgdG8gUERGIGFuZCBhbHNvIHByb3ZpZGUgdGhlIG1lY2hhbmlzbSB0byBzaGFyZSB0aGUgcGRmIHRvIG90aGVyIGFwcHMgbGlrZSBNYWlsLCBldGMuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBQREZHZW5lcmF0b3IgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3BkZi1nZW5lcmF0b3InO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgcGRmR2VuZXJhdG9yOiBQREZHZW5lcmF0b3IpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMucGRmR2VuZXJhdG9yLmZyb21VUkwodXJsLCBvcHRpb25zKS50aGVuKGJhc2U2NFN0cmluZyA9PiBjb25zb2xlLmxvZyhiYXNlNjRTdHJpbmcpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdQREZHZW5lcmF0b3InLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBkZi1nZW5lcmF0b3InLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMucGRmJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9jZXNhcnZyL3BkZi1nZW5lcmF0b3InLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgUERGR2VuZXJhdG9yIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIFBERiB1c2luZyBhIFVSTCwgaXQgZG93bmxvYWQgdGhlIGRvY3VtZW50IGludG8gYW4gaW4gbWVtb3J5IFdlYmtpdCBvYmplY3QsIGFuZCByZW5kZXJzIGl0IGludG8gYSBQREYuXG4gICAqIEBwYXJhbSB1cmwge3N0cmluZ30gVVJMIHRvIGNyZWF0ZSBhIFBERiBmcm9tXG4gICAqIEBwYXJhbSBvcHRpb25zIHtQREZHZW5lcmF0b3JPcHRpb25zfSBvcHRpb25zIGZvciBQREYgZ2VuZXJhdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcbiAgZnJvbVVSTCh1cmw6IHN0cmluZywgb3B0aW9ucz86IFBERkdlbmVyYXRvck9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgUERGIHVzaW5nIHN0cmluZyB3aXRoIHRoZSBIVE1MIHJlcHJlc2VudGF0aW9uLCBpdCBkb3dubG9hZCB0aGUgZG9jdW1lbnQgaW50byBhbiBpbiBtZW1vcnkgV2Via2l0IG9iamVjdCwgYW5kIHJlbmRlcnMgaXQgaW50byBhIFBERi5cbiAgICogQHBhcmFtIGRhdGEge3N0cmluZ30gSFRNTCBzdHJpbmcgcmVwcmVzZW50YXRpb24gdG8gY3JlYXRlIGEgUERGIGZyb21cbiAgICogQHBhcmFtIG9wdGlvbnMge1BERkdlbmVyYXRvck9wdGlvbnN9IG9wdGlvbnMgZm9yIFBERiBnZW5lcmF0aW9uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XG4gICAqL1xuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxuICBmcm9tRGF0YShkYXRhOiBzdHJpbmcsIG9wdGlvbnM/OiBQREZHZW5lcmF0b3JPcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==